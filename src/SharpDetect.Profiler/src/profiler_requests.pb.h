// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/SharpDetect.Common/Messages/profiler_requests.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
namespace SharpDetect {
namespace Common {
namespace Messages {
class ExternalMethodInfo;
class ExternalMethodInfoDefaultTypeInternal;
extern ExternalMethodInfoDefaultTypeInternal _ExternalMethodInfo_default_instance_;
class RequestMessage;
class RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class Request_ContinueExecution;
class Request_ContinueExecutionDefaultTypeInternal;
extern Request_ContinueExecutionDefaultTypeInternal _Request_ContinueExecution_default_instance_;
class Request_Instrumentation;
class Request_InstrumentationDefaultTypeInternal;
extern Request_InstrumentationDefaultTypeInternal _Request_Instrumentation_default_instance_;
class Request_Wrapping;
class Request_WrappingDefaultTypeInternal;
extern Request_WrappingDefaultTypeInternal _Request_Wrapping_default_instance_;
}  // namespace Messages
}  // namespace Common
}  // namespace SharpDetect
PROTOBUF_NAMESPACE_OPEN
template<> ::SharpDetect::Common::Messages::ExternalMethodInfo* Arena::CreateMaybeMessage<::SharpDetect::Common::Messages::ExternalMethodInfo>(Arena*);
template<> ::SharpDetect::Common::Messages::RequestMessage* Arena::CreateMaybeMessage<::SharpDetect::Common::Messages::RequestMessage>(Arena*);
template<> ::SharpDetect::Common::Messages::Request_ContinueExecution* Arena::CreateMaybeMessage<::SharpDetect::Common::Messages::Request_ContinueExecution>(Arena*);
template<> ::SharpDetect::Common::Messages::Request_Instrumentation* Arena::CreateMaybeMessage<::SharpDetect::Common::Messages::Request_Instrumentation>(Arena*);
template<> ::SharpDetect::Common::Messages::Request_Wrapping* Arena::CreateMaybeMessage<::SharpDetect::Common::Messages::Request_Wrapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SharpDetect {
namespace Common {
namespace Messages {

// ===================================================================

class RequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SharpDetect.Common.Messages.RequestMessage) */ {
 public:
  RequestMessage();
  virtual ~RequestMessage();

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMessage* New() const final {
    return CreateMaybeMessage<RequestMessage>(nullptr);
  }

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SharpDetect.Common.Messages.RequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto);
    return ::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentationRequestFieldNumber = 4,
    kWrappingRequestFieldNumber = 5,
    kContinueExecutionRequestFieldNumber = 6,
    kRequestIdFieldNumber = 2,
    kNotificationIdFieldNumber = 3,
    kNoChangesFieldNumber = 1,
  };
  // .SharpDetect.Common.Messages.Request_Instrumentation InstrumentationRequest = 4;
  bool has_instrumentationrequest() const;
  private:
  bool _internal_has_instrumentationrequest() const;
  public:
  void clear_instrumentationrequest();
  const ::SharpDetect::Common::Messages::Request_Instrumentation& instrumentationrequest() const;
  ::SharpDetect::Common::Messages::Request_Instrumentation* release_instrumentationrequest();
  ::SharpDetect::Common::Messages::Request_Instrumentation* mutable_instrumentationrequest();
  void set_allocated_instrumentationrequest(::SharpDetect::Common::Messages::Request_Instrumentation* instrumentationrequest);
  private:
  const ::SharpDetect::Common::Messages::Request_Instrumentation& _internal_instrumentationrequest() const;
  ::SharpDetect::Common::Messages::Request_Instrumentation* _internal_mutable_instrumentationrequest();
  public:

  // .SharpDetect.Common.Messages.Request_Wrapping WrappingRequest = 5;
  bool has_wrappingrequest() const;
  private:
  bool _internal_has_wrappingrequest() const;
  public:
  void clear_wrappingrequest();
  const ::SharpDetect::Common::Messages::Request_Wrapping& wrappingrequest() const;
  ::SharpDetect::Common::Messages::Request_Wrapping* release_wrappingrequest();
  ::SharpDetect::Common::Messages::Request_Wrapping* mutable_wrappingrequest();
  void set_allocated_wrappingrequest(::SharpDetect::Common::Messages::Request_Wrapping* wrappingrequest);
  private:
  const ::SharpDetect::Common::Messages::Request_Wrapping& _internal_wrappingrequest() const;
  ::SharpDetect::Common::Messages::Request_Wrapping* _internal_mutable_wrappingrequest();
  public:

  // .SharpDetect.Common.Messages.Request_ContinueExecution ContinueExecutionRequest = 6;
  bool has_continueexecutionrequest() const;
  private:
  bool _internal_has_continueexecutionrequest() const;
  public:
  void clear_continueexecutionrequest();
  const ::SharpDetect::Common::Messages::Request_ContinueExecution& continueexecutionrequest() const;
  ::SharpDetect::Common::Messages::Request_ContinueExecution* release_continueexecutionrequest();
  ::SharpDetect::Common::Messages::Request_ContinueExecution* mutable_continueexecutionrequest();
  void set_allocated_continueexecutionrequest(::SharpDetect::Common::Messages::Request_ContinueExecution* continueexecutionrequest);
  private:
  const ::SharpDetect::Common::Messages::Request_ContinueExecution& _internal_continueexecutionrequest() const;
  ::SharpDetect::Common::Messages::Request_ContinueExecution* _internal_mutable_continueexecutionrequest();
  public:

  // uint64 RequestId = 2;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 NotificationId = 3;
  void clear_notificationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 notificationid() const;
  void set_notificationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_notificationid() const;
  void _internal_set_notificationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool NoChanges = 1;
  void clear_nochanges();
  bool nochanges() const;
  void set_nochanges(bool value);
  private:
  bool _internal_nochanges() const;
  void _internal_set_nochanges(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SharpDetect.Common.Messages.RequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SharpDetect::Common::Messages::Request_Instrumentation* instrumentationrequest_;
  ::SharpDetect::Common::Messages::Request_Wrapping* wrappingrequest_;
  ::SharpDetect::Common::Messages::Request_ContinueExecution* continueexecutionrequest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 notificationid_;
  bool nochanges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
};
// -------------------------------------------------------------------

class Request_Instrumentation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SharpDetect.Common.Messages.Request_Instrumentation) */ {
 public:
  Request_Instrumentation();
  virtual ~Request_Instrumentation();

  Request_Instrumentation(const Request_Instrumentation& from);
  Request_Instrumentation(Request_Instrumentation&& from) noexcept
    : Request_Instrumentation() {
    *this = ::std::move(from);
  }

  inline Request_Instrumentation& operator=(const Request_Instrumentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_Instrumentation& operator=(Request_Instrumentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_Instrumentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_Instrumentation* internal_default_instance() {
    return reinterpret_cast<const Request_Instrumentation*>(
               &_Request_Instrumentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request_Instrumentation& a, Request_Instrumentation& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_Instrumentation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_Instrumentation* New() const final {
    return CreateMaybeMessage<Request_Instrumentation>(nullptr);
  }

  Request_Instrumentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_Instrumentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_Instrumentation& from);
  void MergeFrom(const Request_Instrumentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_Instrumentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SharpDetect.Common.Messages.Request_Instrumentation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto);
    return ::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytecodeFieldNumber = 4,
    kArgumentInfosFieldNumber = 5,
    kPassingByRefInfosFieldNumber = 6,
    kInjectHooksFieldNumber = 1,
    kCaptureArgumentsFieldNumber = 2,
    kCaptureReturnValueFieldNumber = 3,
  };
  // bytes Bytecode = 4;
  void clear_bytecode();
  const std::string& bytecode() const;
  void set_bytecode(const std::string& value);
  void set_bytecode(std::string&& value);
  void set_bytecode(const char* value);
  void set_bytecode(const void* value, size_t size);
  std::string* mutable_bytecode();
  std::string* release_bytecode();
  void set_allocated_bytecode(std::string* bytecode);
  private:
  const std::string& _internal_bytecode() const;
  void _internal_set_bytecode(const std::string& value);
  std::string* _internal_mutable_bytecode();
  public:

  // bytes ArgumentInfos = 5;
  void clear_argumentinfos();
  const std::string& argumentinfos() const;
  void set_argumentinfos(const std::string& value);
  void set_argumentinfos(std::string&& value);
  void set_argumentinfos(const char* value);
  void set_argumentinfos(const void* value, size_t size);
  std::string* mutable_argumentinfos();
  std::string* release_argumentinfos();
  void set_allocated_argumentinfos(std::string* argumentinfos);
  private:
  const std::string& _internal_argumentinfos() const;
  void _internal_set_argumentinfos(const std::string& value);
  std::string* _internal_mutable_argumentinfos();
  public:

  // bytes PassingByRefInfos = 6;
  void clear_passingbyrefinfos();
  const std::string& passingbyrefinfos() const;
  void set_passingbyrefinfos(const std::string& value);
  void set_passingbyrefinfos(std::string&& value);
  void set_passingbyrefinfos(const char* value);
  void set_passingbyrefinfos(const void* value, size_t size);
  std::string* mutable_passingbyrefinfos();
  std::string* release_passingbyrefinfos();
  void set_allocated_passingbyrefinfos(std::string* passingbyrefinfos);
  private:
  const std::string& _internal_passingbyrefinfos() const;
  void _internal_set_passingbyrefinfos(const std::string& value);
  std::string* _internal_mutable_passingbyrefinfos();
  public:

  // bool InjectHooks = 1;
  void clear_injecthooks();
  bool injecthooks() const;
  void set_injecthooks(bool value);
  private:
  bool _internal_injecthooks() const;
  void _internal_set_injecthooks(bool value);
  public:

  // bool CaptureArguments = 2;
  void clear_capturearguments();
  bool capturearguments() const;
  void set_capturearguments(bool value);
  private:
  bool _internal_capturearguments() const;
  void _internal_set_capturearguments(bool value);
  public:

  // bool CaptureReturnValue = 3;
  void clear_capturereturnvalue();
  bool capturereturnvalue() const;
  void set_capturereturnvalue(bool value);
  private:
  bool _internal_capturereturnvalue() const;
  void _internal_set_capturereturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SharpDetect.Common.Messages.Request_Instrumentation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr argumentinfos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passingbyrefinfos_;
  bool injecthooks_;
  bool capturearguments_;
  bool capturereturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
};
// -------------------------------------------------------------------

class ExternalMethodInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SharpDetect.Common.Messages.ExternalMethodInfo) */ {
 public:
  ExternalMethodInfo();
  virtual ~ExternalMethodInfo();

  ExternalMethodInfo(const ExternalMethodInfo& from);
  ExternalMethodInfo(ExternalMethodInfo&& from) noexcept
    : ExternalMethodInfo() {
    *this = ::std::move(from);
  }

  inline ExternalMethodInfo& operator=(const ExternalMethodInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalMethodInfo& operator=(ExternalMethodInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalMethodInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalMethodInfo* internal_default_instance() {
    return reinterpret_cast<const ExternalMethodInfo*>(
               &_ExternalMethodInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExternalMethodInfo& a, ExternalMethodInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalMethodInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalMethodInfo* New() const final {
    return CreateMaybeMessage<ExternalMethodInfo>(nullptr);
  }

  ExternalMethodInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalMethodInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalMethodInfo& from);
  void MergeFrom(const ExternalMethodInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalMethodInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SharpDetect.Common.Messages.ExternalMethodInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto);
    return ::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassTokenFieldNumber = 1,
    kFunctionTokenFieldNumber = 2,
    kParametersCountFieldNumber = 3,
  };
  // uint32 ClassToken = 1;
  void clear_classtoken();
  ::PROTOBUF_NAMESPACE_ID::uint32 classtoken() const;
  void set_classtoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_classtoken() const;
  void _internal_set_classtoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 FunctionToken = 2;
  void clear_functiontoken();
  ::PROTOBUF_NAMESPACE_ID::uint32 functiontoken() const;
  void set_functiontoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_functiontoken() const;
  void _internal_set_functiontoken(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ParametersCount = 3;
  void clear_parameterscount();
  ::PROTOBUF_NAMESPACE_ID::uint32 parameterscount() const;
  void set_parameterscount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parameterscount() const;
  void _internal_set_parameterscount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SharpDetect.Common.Messages.ExternalMethodInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 classtoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 functiontoken_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parameterscount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
};
// -------------------------------------------------------------------

class Request_Wrapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SharpDetect.Common.Messages.Request_Wrapping) */ {
 public:
  Request_Wrapping();
  virtual ~Request_Wrapping();

  Request_Wrapping(const Request_Wrapping& from);
  Request_Wrapping(Request_Wrapping&& from) noexcept
    : Request_Wrapping() {
    *this = ::std::move(from);
  }

  inline Request_Wrapping& operator=(const Request_Wrapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_Wrapping& operator=(Request_Wrapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_Wrapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_Wrapping* internal_default_instance() {
    return reinterpret_cast<const Request_Wrapping*>(
               &_Request_Wrapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request_Wrapping& a, Request_Wrapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_Wrapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_Wrapping* New() const final {
    return CreateMaybeMessage<Request_Wrapping>(nullptr);
  }

  Request_Wrapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_Wrapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_Wrapping& from);
  void MergeFrom(const Request_Wrapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_Wrapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SharpDetect.Common.Messages.Request_Wrapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto);
    return ::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsToWrapFieldNumber = 1,
  };
  // repeated .SharpDetect.Common.Messages.ExternalMethodInfo MethodsToWrap = 1;
  int methodstowrap_size() const;
  private:
  int _internal_methodstowrap_size() const;
  public:
  void clear_methodstowrap();
  ::SharpDetect::Common::Messages::ExternalMethodInfo* mutable_methodstowrap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SharpDetect::Common::Messages::ExternalMethodInfo >*
      mutable_methodstowrap();
  private:
  const ::SharpDetect::Common::Messages::ExternalMethodInfo& _internal_methodstowrap(int index) const;
  ::SharpDetect::Common::Messages::ExternalMethodInfo* _internal_add_methodstowrap();
  public:
  const ::SharpDetect::Common::Messages::ExternalMethodInfo& methodstowrap(int index) const;
  ::SharpDetect::Common::Messages::ExternalMethodInfo* add_methodstowrap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SharpDetect::Common::Messages::ExternalMethodInfo >&
      methodstowrap() const;

  // @@protoc_insertion_point(class_scope:SharpDetect.Common.Messages.Request_Wrapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SharpDetect::Common::Messages::ExternalMethodInfo > methodstowrap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
};
// -------------------------------------------------------------------

class Request_ContinueExecution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SharpDetect.Common.Messages.Request_ContinueExecution) */ {
 public:
  Request_ContinueExecution();
  virtual ~Request_ContinueExecution();

  Request_ContinueExecution(const Request_ContinueExecution& from);
  Request_ContinueExecution(Request_ContinueExecution&& from) noexcept
    : Request_ContinueExecution() {
    *this = ::std::move(from);
  }

  inline Request_ContinueExecution& operator=(const Request_ContinueExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_ContinueExecution& operator=(Request_ContinueExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_ContinueExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_ContinueExecution* internal_default_instance() {
    return reinterpret_cast<const Request_ContinueExecution*>(
               &_Request_ContinueExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request_ContinueExecution& a, Request_ContinueExecution& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_ContinueExecution* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_ContinueExecution* New() const final {
    return CreateMaybeMessage<Request_ContinueExecution>(nullptr);
  }

  Request_ContinueExecution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_ContinueExecution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_ContinueExecution& from);
  void MergeFrom(const Request_ContinueExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_ContinueExecution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SharpDetect.Common.Messages.Request_ContinueExecution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto);
    return ::descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SharpDetect.Common.Messages.Request_ContinueExecution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestMessage

// bool NoChanges = 1;
inline void RequestMessage::clear_nochanges() {
  nochanges_ = false;
}
inline bool RequestMessage::_internal_nochanges() const {
  return nochanges_;
}
inline bool RequestMessage::nochanges() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.RequestMessage.NoChanges)
  return _internal_nochanges();
}
inline void RequestMessage::_internal_set_nochanges(bool value) {
  
  nochanges_ = value;
}
inline void RequestMessage::set_nochanges(bool value) {
  _internal_set_nochanges(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.RequestMessage.NoChanges)
}

// uint64 RequestId = 2;
inline void RequestMessage::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestMessage::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestMessage::requestid() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.RequestMessage.RequestId)
  return _internal_requestid();
}
inline void RequestMessage::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  requestid_ = value;
}
inline void RequestMessage::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.RequestMessage.RequestId)
}

// uint64 NotificationId = 3;
inline void RequestMessage::clear_notificationid() {
  notificationid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestMessage::_internal_notificationid() const {
  return notificationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestMessage::notificationid() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.RequestMessage.NotificationId)
  return _internal_notificationid();
}
inline void RequestMessage::_internal_set_notificationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  notificationid_ = value;
}
inline void RequestMessage::set_notificationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_notificationid(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.RequestMessage.NotificationId)
}

// .SharpDetect.Common.Messages.Request_Instrumentation InstrumentationRequest = 4;
inline bool RequestMessage::_internal_has_instrumentationrequest() const {
  return this != internal_default_instance() && instrumentationrequest_ != nullptr;
}
inline bool RequestMessage::has_instrumentationrequest() const {
  return _internal_has_instrumentationrequest();
}
inline void RequestMessage::clear_instrumentationrequest() {
  if (GetArenaNoVirtual() == nullptr && instrumentationrequest_ != nullptr) {
    delete instrumentationrequest_;
  }
  instrumentationrequest_ = nullptr;
}
inline const ::SharpDetect::Common::Messages::Request_Instrumentation& RequestMessage::_internal_instrumentationrequest() const {
  const ::SharpDetect::Common::Messages::Request_Instrumentation* p = instrumentationrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SharpDetect::Common::Messages::Request_Instrumentation*>(
      &::SharpDetect::Common::Messages::_Request_Instrumentation_default_instance_);
}
inline const ::SharpDetect::Common::Messages::Request_Instrumentation& RequestMessage::instrumentationrequest() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.RequestMessage.InstrumentationRequest)
  return _internal_instrumentationrequest();
}
inline ::SharpDetect::Common::Messages::Request_Instrumentation* RequestMessage::release_instrumentationrequest() {
  // @@protoc_insertion_point(field_release:SharpDetect.Common.Messages.RequestMessage.InstrumentationRequest)
  
  ::SharpDetect::Common::Messages::Request_Instrumentation* temp = instrumentationrequest_;
  instrumentationrequest_ = nullptr;
  return temp;
}
inline ::SharpDetect::Common::Messages::Request_Instrumentation* RequestMessage::_internal_mutable_instrumentationrequest() {
  
  if (instrumentationrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::SharpDetect::Common::Messages::Request_Instrumentation>(GetArenaNoVirtual());
    instrumentationrequest_ = p;
  }
  return instrumentationrequest_;
}
inline ::SharpDetect::Common::Messages::Request_Instrumentation* RequestMessage::mutable_instrumentationrequest() {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.RequestMessage.InstrumentationRequest)
  return _internal_mutable_instrumentationrequest();
}
inline void RequestMessage::set_allocated_instrumentationrequest(::SharpDetect::Common::Messages::Request_Instrumentation* instrumentationrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instrumentationrequest_;
  }
  if (instrumentationrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instrumentationrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrumentationrequest, submessage_arena);
    }
    
  } else {
    
  }
  instrumentationrequest_ = instrumentationrequest;
  // @@protoc_insertion_point(field_set_allocated:SharpDetect.Common.Messages.RequestMessage.InstrumentationRequest)
}

// .SharpDetect.Common.Messages.Request_Wrapping WrappingRequest = 5;
inline bool RequestMessage::_internal_has_wrappingrequest() const {
  return this != internal_default_instance() && wrappingrequest_ != nullptr;
}
inline bool RequestMessage::has_wrappingrequest() const {
  return _internal_has_wrappingrequest();
}
inline void RequestMessage::clear_wrappingrequest() {
  if (GetArenaNoVirtual() == nullptr && wrappingrequest_ != nullptr) {
    delete wrappingrequest_;
  }
  wrappingrequest_ = nullptr;
}
inline const ::SharpDetect::Common::Messages::Request_Wrapping& RequestMessage::_internal_wrappingrequest() const {
  const ::SharpDetect::Common::Messages::Request_Wrapping* p = wrappingrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SharpDetect::Common::Messages::Request_Wrapping*>(
      &::SharpDetect::Common::Messages::_Request_Wrapping_default_instance_);
}
inline const ::SharpDetect::Common::Messages::Request_Wrapping& RequestMessage::wrappingrequest() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.RequestMessage.WrappingRequest)
  return _internal_wrappingrequest();
}
inline ::SharpDetect::Common::Messages::Request_Wrapping* RequestMessage::release_wrappingrequest() {
  // @@protoc_insertion_point(field_release:SharpDetect.Common.Messages.RequestMessage.WrappingRequest)
  
  ::SharpDetect::Common::Messages::Request_Wrapping* temp = wrappingrequest_;
  wrappingrequest_ = nullptr;
  return temp;
}
inline ::SharpDetect::Common::Messages::Request_Wrapping* RequestMessage::_internal_mutable_wrappingrequest() {
  
  if (wrappingrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::SharpDetect::Common::Messages::Request_Wrapping>(GetArenaNoVirtual());
    wrappingrequest_ = p;
  }
  return wrappingrequest_;
}
inline ::SharpDetect::Common::Messages::Request_Wrapping* RequestMessage::mutable_wrappingrequest() {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.RequestMessage.WrappingRequest)
  return _internal_mutable_wrappingrequest();
}
inline void RequestMessage::set_allocated_wrappingrequest(::SharpDetect::Common::Messages::Request_Wrapping* wrappingrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wrappingrequest_;
  }
  if (wrappingrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wrappingrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrappingrequest, submessage_arena);
    }
    
  } else {
    
  }
  wrappingrequest_ = wrappingrequest;
  // @@protoc_insertion_point(field_set_allocated:SharpDetect.Common.Messages.RequestMessage.WrappingRequest)
}

// .SharpDetect.Common.Messages.Request_ContinueExecution ContinueExecutionRequest = 6;
inline bool RequestMessage::_internal_has_continueexecutionrequest() const {
  return this != internal_default_instance() && continueexecutionrequest_ != nullptr;
}
inline bool RequestMessage::has_continueexecutionrequest() const {
  return _internal_has_continueexecutionrequest();
}
inline void RequestMessage::clear_continueexecutionrequest() {
  if (GetArenaNoVirtual() == nullptr && continueexecutionrequest_ != nullptr) {
    delete continueexecutionrequest_;
  }
  continueexecutionrequest_ = nullptr;
}
inline const ::SharpDetect::Common::Messages::Request_ContinueExecution& RequestMessage::_internal_continueexecutionrequest() const {
  const ::SharpDetect::Common::Messages::Request_ContinueExecution* p = continueexecutionrequest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SharpDetect::Common::Messages::Request_ContinueExecution*>(
      &::SharpDetect::Common::Messages::_Request_ContinueExecution_default_instance_);
}
inline const ::SharpDetect::Common::Messages::Request_ContinueExecution& RequestMessage::continueexecutionrequest() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.RequestMessage.ContinueExecutionRequest)
  return _internal_continueexecutionrequest();
}
inline ::SharpDetect::Common::Messages::Request_ContinueExecution* RequestMessage::release_continueexecutionrequest() {
  // @@protoc_insertion_point(field_release:SharpDetect.Common.Messages.RequestMessage.ContinueExecutionRequest)
  
  ::SharpDetect::Common::Messages::Request_ContinueExecution* temp = continueexecutionrequest_;
  continueexecutionrequest_ = nullptr;
  return temp;
}
inline ::SharpDetect::Common::Messages::Request_ContinueExecution* RequestMessage::_internal_mutable_continueexecutionrequest() {
  
  if (continueexecutionrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::SharpDetect::Common::Messages::Request_ContinueExecution>(GetArenaNoVirtual());
    continueexecutionrequest_ = p;
  }
  return continueexecutionrequest_;
}
inline ::SharpDetect::Common::Messages::Request_ContinueExecution* RequestMessage::mutable_continueexecutionrequest() {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.RequestMessage.ContinueExecutionRequest)
  return _internal_mutable_continueexecutionrequest();
}
inline void RequestMessage::set_allocated_continueexecutionrequest(::SharpDetect::Common::Messages::Request_ContinueExecution* continueexecutionrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete continueexecutionrequest_;
  }
  if (continueexecutionrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      continueexecutionrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continueexecutionrequest, submessage_arena);
    }
    
  } else {
    
  }
  continueexecutionrequest_ = continueexecutionrequest;
  // @@protoc_insertion_point(field_set_allocated:SharpDetect.Common.Messages.RequestMessage.ContinueExecutionRequest)
}

// -------------------------------------------------------------------

// Request_Instrumentation

// bool InjectHooks = 1;
inline void Request_Instrumentation::clear_injecthooks() {
  injecthooks_ = false;
}
inline bool Request_Instrumentation::_internal_injecthooks() const {
  return injecthooks_;
}
inline bool Request_Instrumentation::injecthooks() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Instrumentation.InjectHooks)
  return _internal_injecthooks();
}
inline void Request_Instrumentation::_internal_set_injecthooks(bool value) {
  
  injecthooks_ = value;
}
inline void Request_Instrumentation::set_injecthooks(bool value) {
  _internal_set_injecthooks(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.Request_Instrumentation.InjectHooks)
}

// bool CaptureArguments = 2;
inline void Request_Instrumentation::clear_capturearguments() {
  capturearguments_ = false;
}
inline bool Request_Instrumentation::_internal_capturearguments() const {
  return capturearguments_;
}
inline bool Request_Instrumentation::capturearguments() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Instrumentation.CaptureArguments)
  return _internal_capturearguments();
}
inline void Request_Instrumentation::_internal_set_capturearguments(bool value) {
  
  capturearguments_ = value;
}
inline void Request_Instrumentation::set_capturearguments(bool value) {
  _internal_set_capturearguments(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.Request_Instrumentation.CaptureArguments)
}

// bool CaptureReturnValue = 3;
inline void Request_Instrumentation::clear_capturereturnvalue() {
  capturereturnvalue_ = false;
}
inline bool Request_Instrumentation::_internal_capturereturnvalue() const {
  return capturereturnvalue_;
}
inline bool Request_Instrumentation::capturereturnvalue() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Instrumentation.CaptureReturnValue)
  return _internal_capturereturnvalue();
}
inline void Request_Instrumentation::_internal_set_capturereturnvalue(bool value) {
  
  capturereturnvalue_ = value;
}
inline void Request_Instrumentation::set_capturereturnvalue(bool value) {
  _internal_set_capturereturnvalue(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.Request_Instrumentation.CaptureReturnValue)
}

// bytes Bytecode = 4;
inline void Request_Instrumentation::clear_bytecode() {
  bytecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request_Instrumentation::bytecode() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
  return _internal_bytecode();
}
inline void Request_Instrumentation::set_bytecode(const std::string& value) {
  _internal_set_bytecode(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
}
inline std::string* Request_Instrumentation::mutable_bytecode() {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
  return _internal_mutable_bytecode();
}
inline const std::string& Request_Instrumentation::_internal_bytecode() const {
  return bytecode_.GetNoArena();
}
inline void Request_Instrumentation::_internal_set_bytecode(const std::string& value) {
  
  bytecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request_Instrumentation::set_bytecode(std::string&& value) {
  
  bytecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
}
inline void Request_Instrumentation::set_bytecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
}
inline void Request_Instrumentation::set_bytecode(const void* value, size_t size) {
  
  bytecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
}
inline std::string* Request_Instrumentation::_internal_mutable_bytecode() {
  
  return bytecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request_Instrumentation::release_bytecode() {
  // @@protoc_insertion_point(field_release:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
  
  return bytecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Instrumentation::set_allocated_bytecode(std::string* bytecode) {
  if (bytecode != nullptr) {
    
  } else {
    
  }
  bytecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytecode);
  // @@protoc_insertion_point(field_set_allocated:SharpDetect.Common.Messages.Request_Instrumentation.Bytecode)
}

// bytes ArgumentInfos = 5;
inline void Request_Instrumentation::clear_argumentinfos() {
  argumentinfos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request_Instrumentation::argumentinfos() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
  return _internal_argumentinfos();
}
inline void Request_Instrumentation::set_argumentinfos(const std::string& value) {
  _internal_set_argumentinfos(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
}
inline std::string* Request_Instrumentation::mutable_argumentinfos() {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
  return _internal_mutable_argumentinfos();
}
inline const std::string& Request_Instrumentation::_internal_argumentinfos() const {
  return argumentinfos_.GetNoArena();
}
inline void Request_Instrumentation::_internal_set_argumentinfos(const std::string& value) {
  
  argumentinfos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request_Instrumentation::set_argumentinfos(std::string&& value) {
  
  argumentinfos_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
}
inline void Request_Instrumentation::set_argumentinfos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  argumentinfos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
}
inline void Request_Instrumentation::set_argumentinfos(const void* value, size_t size) {
  
  argumentinfos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
}
inline std::string* Request_Instrumentation::_internal_mutable_argumentinfos() {
  
  return argumentinfos_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request_Instrumentation::release_argumentinfos() {
  // @@protoc_insertion_point(field_release:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
  
  return argumentinfos_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Instrumentation::set_allocated_argumentinfos(std::string* argumentinfos) {
  if (argumentinfos != nullptr) {
    
  } else {
    
  }
  argumentinfos_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), argumentinfos);
  // @@protoc_insertion_point(field_set_allocated:SharpDetect.Common.Messages.Request_Instrumentation.ArgumentInfos)
}

// bytes PassingByRefInfos = 6;
inline void Request_Instrumentation::clear_passingbyrefinfos() {
  passingbyrefinfos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request_Instrumentation::passingbyrefinfos() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
  return _internal_passingbyrefinfos();
}
inline void Request_Instrumentation::set_passingbyrefinfos(const std::string& value) {
  _internal_set_passingbyrefinfos(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
}
inline std::string* Request_Instrumentation::mutable_passingbyrefinfos() {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
  return _internal_mutable_passingbyrefinfos();
}
inline const std::string& Request_Instrumentation::_internal_passingbyrefinfos() const {
  return passingbyrefinfos_.GetNoArena();
}
inline void Request_Instrumentation::_internal_set_passingbyrefinfos(const std::string& value) {
  
  passingbyrefinfos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request_Instrumentation::set_passingbyrefinfos(std::string&& value) {
  
  passingbyrefinfos_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
}
inline void Request_Instrumentation::set_passingbyrefinfos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passingbyrefinfos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
}
inline void Request_Instrumentation::set_passingbyrefinfos(const void* value, size_t size) {
  
  passingbyrefinfos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
}
inline std::string* Request_Instrumentation::_internal_mutable_passingbyrefinfos() {
  
  return passingbyrefinfos_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request_Instrumentation::release_passingbyrefinfos() {
  // @@protoc_insertion_point(field_release:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
  
  return passingbyrefinfos_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request_Instrumentation::set_allocated_passingbyrefinfos(std::string* passingbyrefinfos) {
  if (passingbyrefinfos != nullptr) {
    
  } else {
    
  }
  passingbyrefinfos_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passingbyrefinfos);
  // @@protoc_insertion_point(field_set_allocated:SharpDetect.Common.Messages.Request_Instrumentation.PassingByRefInfos)
}

// -------------------------------------------------------------------

// ExternalMethodInfo

// uint32 ClassToken = 1;
inline void ExternalMethodInfo::clear_classtoken() {
  classtoken_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalMethodInfo::_internal_classtoken() const {
  return classtoken_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalMethodInfo::classtoken() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.ExternalMethodInfo.ClassToken)
  return _internal_classtoken();
}
inline void ExternalMethodInfo::_internal_set_classtoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  classtoken_ = value;
}
inline void ExternalMethodInfo::set_classtoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_classtoken(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.ExternalMethodInfo.ClassToken)
}

// uint32 FunctionToken = 2;
inline void ExternalMethodInfo::clear_functiontoken() {
  functiontoken_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalMethodInfo::_internal_functiontoken() const {
  return functiontoken_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalMethodInfo::functiontoken() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.ExternalMethodInfo.FunctionToken)
  return _internal_functiontoken();
}
inline void ExternalMethodInfo::_internal_set_functiontoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  functiontoken_ = value;
}
inline void ExternalMethodInfo::set_functiontoken(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_functiontoken(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.ExternalMethodInfo.FunctionToken)
}

// uint32 ParametersCount = 3;
inline void ExternalMethodInfo::clear_parameterscount() {
  parameterscount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalMethodInfo::_internal_parameterscount() const {
  return parameterscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalMethodInfo::parameterscount() const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.ExternalMethodInfo.ParametersCount)
  return _internal_parameterscount();
}
inline void ExternalMethodInfo::_internal_set_parameterscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parameterscount_ = value;
}
inline void ExternalMethodInfo::set_parameterscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parameterscount(value);
  // @@protoc_insertion_point(field_set:SharpDetect.Common.Messages.ExternalMethodInfo.ParametersCount)
}

// -------------------------------------------------------------------

// Request_Wrapping

// repeated .SharpDetect.Common.Messages.ExternalMethodInfo MethodsToWrap = 1;
inline int Request_Wrapping::_internal_methodstowrap_size() const {
  return methodstowrap_.size();
}
inline int Request_Wrapping::methodstowrap_size() const {
  return _internal_methodstowrap_size();
}
inline void Request_Wrapping::clear_methodstowrap() {
  methodstowrap_.Clear();
}
inline ::SharpDetect::Common::Messages::ExternalMethodInfo* Request_Wrapping::mutable_methodstowrap(int index) {
  // @@protoc_insertion_point(field_mutable:SharpDetect.Common.Messages.Request_Wrapping.MethodsToWrap)
  return methodstowrap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SharpDetect::Common::Messages::ExternalMethodInfo >*
Request_Wrapping::mutable_methodstowrap() {
  // @@protoc_insertion_point(field_mutable_list:SharpDetect.Common.Messages.Request_Wrapping.MethodsToWrap)
  return &methodstowrap_;
}
inline const ::SharpDetect::Common::Messages::ExternalMethodInfo& Request_Wrapping::_internal_methodstowrap(int index) const {
  return methodstowrap_.Get(index);
}
inline const ::SharpDetect::Common::Messages::ExternalMethodInfo& Request_Wrapping::methodstowrap(int index) const {
  // @@protoc_insertion_point(field_get:SharpDetect.Common.Messages.Request_Wrapping.MethodsToWrap)
  return _internal_methodstowrap(index);
}
inline ::SharpDetect::Common::Messages::ExternalMethodInfo* Request_Wrapping::_internal_add_methodstowrap() {
  return methodstowrap_.Add();
}
inline ::SharpDetect::Common::Messages::ExternalMethodInfo* Request_Wrapping::add_methodstowrap() {
  // @@protoc_insertion_point(field_add:SharpDetect.Common.Messages.Request_Wrapping.MethodsToWrap)
  return _internal_add_methodstowrap();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SharpDetect::Common::Messages::ExternalMethodInfo >&
Request_Wrapping::methodstowrap() const {
  // @@protoc_insertion_point(field_list:SharpDetect.Common.Messages.Request_Wrapping.MethodsToWrap)
  return methodstowrap_;
}

// -------------------------------------------------------------------

// Request_ContinueExecution

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace Common
}  // namespace SharpDetect

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto
