// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/SharpDetect.Common/Messages/profiler_requests.proto

#include "profiler_requests.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto;
namespace SharpDetect {
namespace Common {
namespace Messages {
class RequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestMessage> _instance;
} _RequestMessage_default_instance_;
class Request_InstrumentationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_Instrumentation> _instance;
} _Request_Instrumentation_default_instance_;
class ExternalMethodInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternalMethodInfo> _instance;
} _ExternalMethodInfo_default_instance_;
class Request_WrappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_Wrapping> _instance;
} _Request_Wrapping_default_instance_;
class Request_ContinueExecutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request_ContinueExecution> _instance;
} _Request_ContinueExecution_default_instance_;
}  // namespace Messages
}  // namespace Common
}  // namespace SharpDetect
static void InitDefaultsscc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SharpDetect::Common::Messages::_ExternalMethodInfo_default_instance_;
    new (ptr) ::SharpDetect::Common::Messages::ExternalMethodInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SharpDetect::Common::Messages::ExternalMethodInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto}, {}};

static void InitDefaultsscc_info_RequestMessage_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SharpDetect::Common::Messages::_RequestMessage_default_instance_;
    new (ptr) ::SharpDetect::Common::Messages::RequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SharpDetect::Common::Messages::RequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestMessage_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RequestMessage_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto}, {
      &scc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
      &scc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
      &scc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,}};

static void InitDefaultsscc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SharpDetect::Common::Messages::_Request_ContinueExecution_default_instance_;
    new (ptr) ::SharpDetect::Common::Messages::Request_ContinueExecution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SharpDetect::Common::Messages::Request_ContinueExecution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto}, {}};

static void InitDefaultsscc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SharpDetect::Common::Messages::_Request_Instrumentation_default_instance_;
    new (ptr) ::SharpDetect::Common::Messages::Request_Instrumentation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SharpDetect::Common::Messages::Request_Instrumentation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto}, {}};

static void InitDefaultsscc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SharpDetect::Common::Messages::_Request_Wrapping_default_instance_;
    new (ptr) ::SharpDetect::Common::Messages::Request_Wrapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SharpDetect::Common::Messages::Request_Wrapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto}, {
      &scc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, nochanges_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, requestid_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, notificationid_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, instrumentationrequest_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, wrappingrequest_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::RequestMessage, continueexecutionrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, injecthooks_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, capturearguments_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, capturereturnvalue_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, bytecode_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, argumentinfos_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Instrumentation, passingbyrefinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::ExternalMethodInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::ExternalMethodInfo, classtoken_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::ExternalMethodInfo, functiontoken_),
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::ExternalMethodInfo, parameterscount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Wrapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_Wrapping, methodstowrap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SharpDetect::Common::Messages::Request_ContinueExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SharpDetect::Common::Messages::RequestMessage)},
  { 11, -1, sizeof(::SharpDetect::Common::Messages::Request_Instrumentation)},
  { 22, -1, sizeof(::SharpDetect::Common::Messages::ExternalMethodInfo)},
  { 30, -1, sizeof(::SharpDetect::Common::Messages::Request_Wrapping)},
  { 36, -1, sizeof(::SharpDetect::Common::Messages::Request_ContinueExecution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SharpDetect::Common::Messages::_RequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SharpDetect::Common::Messages::_Request_Instrumentation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SharpDetect::Common::Messages::_ExternalMethodInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SharpDetect::Common::Messages::_Request_Wrapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SharpDetect::Common::Messages::_Request_ContinueExecution_default_instance_),
};

const char descriptor_table_protodef_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7src/SharpDetect.Common/Messages/profil"
  "er_requests.proto\022\033SharpDetect.Common.Me"
  "ssages\"\306\002\n\016RequestMessage\022\021\n\tNoChanges\030\001"
  " \001(\010\022\021\n\tRequestId\030\002 \001(\004\022\026\n\016NotificationI"
  "d\030\003 \001(\004\022T\n\026InstrumentationRequest\030\004 \001(\0132"
  "4.SharpDetect.Common.Messages.Request_In"
  "strumentation\022F\n\017WrappingRequest\030\005 \001(\0132-"
  ".SharpDetect.Common.Messages.Request_Wra"
  "pping\022X\n\030ContinueExecutionRequest\030\006 \001(\0132"
  "6.SharpDetect.Common.Messages.Request_Co"
  "ntinueExecution\"\250\001\n\027Request_Instrumentat"
  "ion\022\023\n\013InjectHooks\030\001 \001(\010\022\030\n\020CaptureArgum"
  "ents\030\002 \001(\010\022\032\n\022CaptureReturnValue\030\003 \001(\010\022\020"
  "\n\010Bytecode\030\004 \001(\014\022\025\n\rArgumentInfos\030\005 \001(\014\022"
  "\031\n\021PassingByRefInfos\030\006 \001(\014\"X\n\022ExternalMe"
  "thodInfo\022\022\n\nClassToken\030\001 \001(\r\022\025\n\rFunction"
  "Token\030\002 \001(\r\022\027\n\017ParametersCount\030\003 \001(\r\"Z\n\020"
  "Request_Wrapping\022F\n\rMethodsToWrap\030\001 \003(\0132"
  "/.SharpDetect.Common.Messages.ExternalMe"
  "thodInfo\"\033\n\031Request_ContinueExecutionb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_sccs[5] = {
  &scc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
  &scc_info_RequestMessage_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
  &scc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
  &scc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
  &scc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_once;
static bool descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto = {
  &descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_initialized, descriptor_table_protodef_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto, "src/SharpDetect.Common/Messages/profiler_requests.proto", 805,
  &descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_once, descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_sccs, descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto::offsets,
  file_level_metadata_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto, 5, file_level_enum_descriptors_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto, file_level_service_descriptors_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto), true);
namespace SharpDetect {
namespace Common {
namespace Messages {

// ===================================================================

void RequestMessage::InitAsDefaultInstance() {
  ::SharpDetect::Common::Messages::_RequestMessage_default_instance_._instance.get_mutable()->instrumentationrequest_ = const_cast< ::SharpDetect::Common::Messages::Request_Instrumentation*>(
      ::SharpDetect::Common::Messages::Request_Instrumentation::internal_default_instance());
  ::SharpDetect::Common::Messages::_RequestMessage_default_instance_._instance.get_mutable()->wrappingrequest_ = const_cast< ::SharpDetect::Common::Messages::Request_Wrapping*>(
      ::SharpDetect::Common::Messages::Request_Wrapping::internal_default_instance());
  ::SharpDetect::Common::Messages::_RequestMessage_default_instance_._instance.get_mutable()->continueexecutionrequest_ = const_cast< ::SharpDetect::Common::Messages::Request_ContinueExecution*>(
      ::SharpDetect::Common::Messages::Request_ContinueExecution::internal_default_instance());
}
class RequestMessage::_Internal {
 public:
  static const ::SharpDetect::Common::Messages::Request_Instrumentation& instrumentationrequest(const RequestMessage* msg);
  static const ::SharpDetect::Common::Messages::Request_Wrapping& wrappingrequest(const RequestMessage* msg);
  static const ::SharpDetect::Common::Messages::Request_ContinueExecution& continueexecutionrequest(const RequestMessage* msg);
};

const ::SharpDetect::Common::Messages::Request_Instrumentation&
RequestMessage::_Internal::instrumentationrequest(const RequestMessage* msg) {
  return *msg->instrumentationrequest_;
}
const ::SharpDetect::Common::Messages::Request_Wrapping&
RequestMessage::_Internal::wrappingrequest(const RequestMessage* msg) {
  return *msg->wrappingrequest_;
}
const ::SharpDetect::Common::Messages::Request_ContinueExecution&
RequestMessage::_Internal::continueexecutionrequest(const RequestMessage* msg) {
  return *msg->continueexecutionrequest_;
}
RequestMessage::RequestMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SharpDetect.Common.Messages.RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_instrumentationrequest()) {
    instrumentationrequest_ = new ::SharpDetect::Common::Messages::Request_Instrumentation(*from.instrumentationrequest_);
  } else {
    instrumentationrequest_ = nullptr;
  }
  if (from._internal_has_wrappingrequest()) {
    wrappingrequest_ = new ::SharpDetect::Common::Messages::Request_Wrapping(*from.wrappingrequest_);
  } else {
    wrappingrequest_ = nullptr;
  }
  if (from._internal_has_continueexecutionrequest()) {
    continueexecutionrequest_ = new ::SharpDetect::Common::Messages::Request_ContinueExecution(*from.continueexecutionrequest_);
  } else {
    continueexecutionrequest_ = nullptr;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nochanges_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(nochanges_));
  // @@protoc_insertion_point(copy_constructor:SharpDetect.Common.Messages.RequestMessage)
}

void RequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestMessage_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  ::memset(&instrumentationrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nochanges_) -
      reinterpret_cast<char*>(&instrumentationrequest_)) + sizeof(nochanges_));
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:SharpDetect.Common.Messages.RequestMessage)
  SharedDtor();
}

void RequestMessage::SharedDtor() {
  if (this != internal_default_instance()) delete instrumentationrequest_;
  if (this != internal_default_instance()) delete wrappingrequest_;
  if (this != internal_default_instance()) delete continueexecutionrequest_;
}

void RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestMessage& RequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestMessage_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  return *internal_default_instance();
}


void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SharpDetect.Common.Messages.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && instrumentationrequest_ != nullptr) {
    delete instrumentationrequest_;
  }
  instrumentationrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wrappingrequest_ != nullptr) {
    delete wrappingrequest_;
  }
  wrappingrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && continueexecutionrequest_ != nullptr) {
    delete continueexecutionrequest_;
  }
  continueexecutionrequest_ = nullptr;
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nochanges_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(nochanges_));
  _internal_metadata_.Clear();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool NoChanges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nochanges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RequestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 NotificationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          notificationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SharpDetect.Common.Messages.Request_Instrumentation InstrumentationRequest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentationrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SharpDetect.Common.Messages.Request_Wrapping WrappingRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrappingrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SharpDetect.Common.Messages.Request_ContinueExecution ContinueExecutionRequest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_continueexecutionrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SharpDetect.Common.Messages.RequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool NoChanges = 1;
  if (this->nochanges() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_nochanges(), target);
  }

  // uint64 RequestId = 2;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_requestid(), target);
  }

  // uint64 NotificationId = 3;
  if (this->notificationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_notificationid(), target);
  }

  // .SharpDetect.Common.Messages.Request_Instrumentation InstrumentationRequest = 4;
  if (this->has_instrumentationrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::instrumentationrequest(this), target, stream);
  }

  // .SharpDetect.Common.Messages.Request_Wrapping WrappingRequest = 5;
  if (this->has_wrappingrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wrappingrequest(this), target, stream);
  }

  // .SharpDetect.Common.Messages.Request_ContinueExecution ContinueExecutionRequest = 6;
  if (this->has_continueexecutionrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::continueexecutionrequest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SharpDetect.Common.Messages.RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SharpDetect.Common.Messages.RequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SharpDetect.Common.Messages.Request_Instrumentation InstrumentationRequest = 4;
  if (this->has_instrumentationrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrumentationrequest_);
  }

  // .SharpDetect.Common.Messages.Request_Wrapping WrappingRequest = 5;
  if (this->has_wrappingrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wrappingrequest_);
  }

  // .SharpDetect.Common.Messages.Request_ContinueExecution ContinueExecutionRequest = 6;
  if (this->has_continueexecutionrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *continueexecutionrequest_);
  }

  // uint64 RequestId = 2;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  // uint64 NotificationId = 3;
  if (this->notificationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_notificationid());
  }

  // bool NoChanges = 1;
  if (this->nochanges() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SharpDetect.Common.Messages.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SharpDetect.Common.Messages.RequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SharpDetect.Common.Messages.RequestMessage)
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SharpDetect.Common.Messages.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instrumentationrequest()) {
    _internal_mutable_instrumentationrequest()->::SharpDetect::Common::Messages::Request_Instrumentation::MergeFrom(from._internal_instrumentationrequest());
  }
  if (from.has_wrappingrequest()) {
    _internal_mutable_wrappingrequest()->::SharpDetect::Common::Messages::Request_Wrapping::MergeFrom(from._internal_wrappingrequest());
  }
  if (from.has_continueexecutionrequest()) {
    _internal_mutable_continueexecutionrequest()->::SharpDetect::Common::Messages::Request_ContinueExecution::MergeFrom(from._internal_continueexecutionrequest());
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.notificationid() != 0) {
    _internal_set_notificationid(from._internal_notificationid());
  }
  if (from.nochanges() != 0) {
    _internal_set_nochanges(from._internal_nochanges());
  }
}

void RequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SharpDetect.Common.Messages.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SharpDetect.Common.Messages.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(instrumentationrequest_, other->instrumentationrequest_);
  swap(wrappingrequest_, other->wrappingrequest_);
  swap(continueexecutionrequest_, other->continueexecutionrequest_);
  swap(requestid_, other->requestid_);
  swap(notificationid_, other->notificationid_);
  swap(nochanges_, other->nochanges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request_Instrumentation::InitAsDefaultInstance() {
}
class Request_Instrumentation::_Internal {
 public:
};

Request_Instrumentation::Request_Instrumentation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SharpDetect.Common.Messages.Request_Instrumentation)
}
Request_Instrumentation::Request_Instrumentation(const Request_Instrumentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bytecode().empty()) {
    bytecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytecode_);
  }
  argumentinfos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_argumentinfos().empty()) {
    argumentinfos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.argumentinfos_);
  }
  passingbyrefinfos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passingbyrefinfos().empty()) {
    passingbyrefinfos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passingbyrefinfos_);
  }
  ::memcpy(&injecthooks_, &from.injecthooks_,
    static_cast<size_t>(reinterpret_cast<char*>(&capturereturnvalue_) -
    reinterpret_cast<char*>(&injecthooks_)) + sizeof(capturereturnvalue_));
  // @@protoc_insertion_point(copy_constructor:SharpDetect.Common.Messages.Request_Instrumentation)
}

void Request_Instrumentation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  bytecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  argumentinfos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passingbyrefinfos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&injecthooks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capturereturnvalue_) -
      reinterpret_cast<char*>(&injecthooks_)) + sizeof(capturereturnvalue_));
}

Request_Instrumentation::~Request_Instrumentation() {
  // @@protoc_insertion_point(destructor:SharpDetect.Common.Messages.Request_Instrumentation)
  SharedDtor();
}

void Request_Instrumentation::SharedDtor() {
  bytecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  argumentinfos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passingbyrefinfos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_Instrumentation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_Instrumentation& Request_Instrumentation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_Instrumentation_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  return *internal_default_instance();
}


void Request_Instrumentation::Clear() {
// @@protoc_insertion_point(message_clear_start:SharpDetect.Common.Messages.Request_Instrumentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  argumentinfos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passingbyrefinfos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&injecthooks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capturereturnvalue_) -
      reinterpret_cast<char*>(&injecthooks_)) + sizeof(capturereturnvalue_));
  _internal_metadata_.Clear();
}

const char* Request_Instrumentation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool InjectHooks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          injecthooks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool CaptureArguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capturearguments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool CaptureReturnValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          capturereturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Bytecode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bytecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ArgumentInfos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_argumentinfos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes PassingByRefInfos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_passingbyrefinfos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_Instrumentation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SharpDetect.Common.Messages.Request_Instrumentation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool InjectHooks = 1;
  if (this->injecthooks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_injecthooks(), target);
  }

  // bool CaptureArguments = 2;
  if (this->capturearguments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_capturearguments(), target);
  }

  // bool CaptureReturnValue = 3;
  if (this->capturereturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_capturereturnvalue(), target);
  }

  // bytes Bytecode = 4;
  if (this->bytecode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bytecode(), target);
  }

  // bytes ArgumentInfos = 5;
  if (this->argumentinfos().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_argumentinfos(), target);
  }

  // bytes PassingByRefInfos = 6;
  if (this->passingbyrefinfos().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_passingbyrefinfos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SharpDetect.Common.Messages.Request_Instrumentation)
  return target;
}

size_t Request_Instrumentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SharpDetect.Common.Messages.Request_Instrumentation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bytecode = 4;
  if (this->bytecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytecode());
  }

  // bytes ArgumentInfos = 5;
  if (this->argumentinfos().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_argumentinfos());
  }

  // bytes PassingByRefInfos = 6;
  if (this->passingbyrefinfos().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passingbyrefinfos());
  }

  // bool InjectHooks = 1;
  if (this->injecthooks() != 0) {
    total_size += 1 + 1;
  }

  // bool CaptureArguments = 2;
  if (this->capturearguments() != 0) {
    total_size += 1 + 1;
  }

  // bool CaptureReturnValue = 3;
  if (this->capturereturnvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_Instrumentation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SharpDetect.Common.Messages.Request_Instrumentation)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_Instrumentation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request_Instrumentation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SharpDetect.Common.Messages.Request_Instrumentation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SharpDetect.Common.Messages.Request_Instrumentation)
    MergeFrom(*source);
  }
}

void Request_Instrumentation::MergeFrom(const Request_Instrumentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SharpDetect.Common.Messages.Request_Instrumentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytecode().size() > 0) {

    bytecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytecode_);
  }
  if (from.argumentinfos().size() > 0) {

    argumentinfos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.argumentinfos_);
  }
  if (from.passingbyrefinfos().size() > 0) {

    passingbyrefinfos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passingbyrefinfos_);
  }
  if (from.injecthooks() != 0) {
    _internal_set_injecthooks(from._internal_injecthooks());
  }
  if (from.capturearguments() != 0) {
    _internal_set_capturearguments(from._internal_capturearguments());
  }
  if (from.capturereturnvalue() != 0) {
    _internal_set_capturereturnvalue(from._internal_capturereturnvalue());
  }
}

void Request_Instrumentation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SharpDetect.Common.Messages.Request_Instrumentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Instrumentation::CopyFrom(const Request_Instrumentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SharpDetect.Common.Messages.Request_Instrumentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Instrumentation::IsInitialized() const {
  return true;
}

void Request_Instrumentation::InternalSwap(Request_Instrumentation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bytecode_.Swap(&other->bytecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  argumentinfos_.Swap(&other->argumentinfos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passingbyrefinfos_.Swap(&other->passingbyrefinfos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(injecthooks_, other->injecthooks_);
  swap(capturearguments_, other->capturearguments_);
  swap(capturereturnvalue_, other->capturereturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request_Instrumentation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternalMethodInfo::InitAsDefaultInstance() {
}
class ExternalMethodInfo::_Internal {
 public:
};

ExternalMethodInfo::ExternalMethodInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SharpDetect.Common.Messages.ExternalMethodInfo)
}
ExternalMethodInfo::ExternalMethodInfo(const ExternalMethodInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&classtoken_, &from.classtoken_,
    static_cast<size_t>(reinterpret_cast<char*>(&parameterscount_) -
    reinterpret_cast<char*>(&classtoken_)) + sizeof(parameterscount_));
  // @@protoc_insertion_point(copy_constructor:SharpDetect.Common.Messages.ExternalMethodInfo)
}

void ExternalMethodInfo::SharedCtor() {
  ::memset(&classtoken_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parameterscount_) -
      reinterpret_cast<char*>(&classtoken_)) + sizeof(parameterscount_));
}

ExternalMethodInfo::~ExternalMethodInfo() {
  // @@protoc_insertion_point(destructor:SharpDetect.Common.Messages.ExternalMethodInfo)
  SharedDtor();
}

void ExternalMethodInfo::SharedDtor() {
}

void ExternalMethodInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalMethodInfo& ExternalMethodInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternalMethodInfo_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  return *internal_default_instance();
}


void ExternalMethodInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&classtoken_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parameterscount_) -
      reinterpret_cast<char*>(&classtoken_)) + sizeof(parameterscount_));
  _internal_metadata_.Clear();
}

const char* ExternalMethodInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ClassToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          classtoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FunctionToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          functiontoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ParametersCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parameterscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalMethodInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ClassToken = 1;
  if (this->classtoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_classtoken(), target);
  }

  // uint32 FunctionToken = 2;
  if (this->functiontoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_functiontoken(), target);
  }

  // uint32 ParametersCount = 3;
  if (this->parameterscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_parameterscount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SharpDetect.Common.Messages.ExternalMethodInfo)
  return target;
}

size_t ExternalMethodInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ClassToken = 1;
  if (this->classtoken() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_classtoken());
  }

  // uint32 FunctionToken = 2;
  if (this->functiontoken() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_functiontoken());
  }

  // uint32 ParametersCount = 3;
  if (this->parameterscount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parameterscount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalMethodInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalMethodInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternalMethodInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SharpDetect.Common.Messages.ExternalMethodInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SharpDetect.Common.Messages.ExternalMethodInfo)
    MergeFrom(*source);
  }
}

void ExternalMethodInfo::MergeFrom(const ExternalMethodInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.classtoken() != 0) {
    _internal_set_classtoken(from._internal_classtoken());
  }
  if (from.functiontoken() != 0) {
    _internal_set_functiontoken(from._internal_functiontoken());
  }
  if (from.parameterscount() != 0) {
    _internal_set_parameterscount(from._internal_parameterscount());
  }
}

void ExternalMethodInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalMethodInfo::CopyFrom(const ExternalMethodInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SharpDetect.Common.Messages.ExternalMethodInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalMethodInfo::IsInitialized() const {
  return true;
}

void ExternalMethodInfo::InternalSwap(ExternalMethodInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classtoken_, other->classtoken_);
  swap(functiontoken_, other->functiontoken_);
  swap(parameterscount_, other->parameterscount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalMethodInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request_Wrapping::InitAsDefaultInstance() {
}
class Request_Wrapping::_Internal {
 public:
};

Request_Wrapping::Request_Wrapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SharpDetect.Common.Messages.Request_Wrapping)
}
Request_Wrapping::Request_Wrapping(const Request_Wrapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      methodstowrap_(from.methodstowrap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SharpDetect.Common.Messages.Request_Wrapping)
}

void Request_Wrapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
}

Request_Wrapping::~Request_Wrapping() {
  // @@protoc_insertion_point(destructor:SharpDetect.Common.Messages.Request_Wrapping)
  SharedDtor();
}

void Request_Wrapping::SharedDtor() {
}

void Request_Wrapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_Wrapping& Request_Wrapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_Wrapping_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  return *internal_default_instance();
}


void Request_Wrapping::Clear() {
// @@protoc_insertion_point(message_clear_start:SharpDetect.Common.Messages.Request_Wrapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  methodstowrap_.Clear();
  _internal_metadata_.Clear();
}

const char* Request_Wrapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SharpDetect.Common.Messages.ExternalMethodInfo MethodsToWrap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_methodstowrap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_Wrapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SharpDetect.Common.Messages.Request_Wrapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SharpDetect.Common.Messages.ExternalMethodInfo MethodsToWrap = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_methodstowrap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_methodstowrap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SharpDetect.Common.Messages.Request_Wrapping)
  return target;
}

size_t Request_Wrapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SharpDetect.Common.Messages.Request_Wrapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SharpDetect.Common.Messages.ExternalMethodInfo MethodsToWrap = 1;
  total_size += 1UL * this->_internal_methodstowrap_size();
  for (const auto& msg : this->methodstowrap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_Wrapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SharpDetect.Common.Messages.Request_Wrapping)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_Wrapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request_Wrapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SharpDetect.Common.Messages.Request_Wrapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SharpDetect.Common.Messages.Request_Wrapping)
    MergeFrom(*source);
  }
}

void Request_Wrapping::MergeFrom(const Request_Wrapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SharpDetect.Common.Messages.Request_Wrapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  methodstowrap_.MergeFrom(from.methodstowrap_);
}

void Request_Wrapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SharpDetect.Common.Messages.Request_Wrapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Wrapping::CopyFrom(const Request_Wrapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SharpDetect.Common.Messages.Request_Wrapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Wrapping::IsInitialized() const {
  return true;
}

void Request_Wrapping::InternalSwap(Request_Wrapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  methodstowrap_.InternalSwap(&other->methodstowrap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request_Wrapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request_ContinueExecution::InitAsDefaultInstance() {
}
class Request_ContinueExecution::_Internal {
 public:
};

Request_ContinueExecution::Request_ContinueExecution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SharpDetect.Common.Messages.Request_ContinueExecution)
}
Request_ContinueExecution::Request_ContinueExecution(const Request_ContinueExecution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SharpDetect.Common.Messages.Request_ContinueExecution)
}

void Request_ContinueExecution::SharedCtor() {
}

Request_ContinueExecution::~Request_ContinueExecution() {
  // @@protoc_insertion_point(destructor:SharpDetect.Common.Messages.Request_ContinueExecution)
  SharedDtor();
}

void Request_ContinueExecution::SharedDtor() {
}

void Request_ContinueExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request_ContinueExecution& Request_ContinueExecution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_ContinueExecution_src_2fSharpDetect_2eCommon_2fMessages_2fprofiler_5frequests_2eproto.base);
  return *internal_default_instance();
}


void Request_ContinueExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Request_ContinueExecution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_ContinueExecution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SharpDetect.Common.Messages.Request_ContinueExecution)
  return target;
}

size_t Request_ContinueExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_ContinueExecution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_ContinueExecution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request_ContinueExecution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SharpDetect.Common.Messages.Request_ContinueExecution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SharpDetect.Common.Messages.Request_ContinueExecution)
    MergeFrom(*source);
  }
}

void Request_ContinueExecution::MergeFrom(const Request_ContinueExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Request_ContinueExecution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ContinueExecution::CopyFrom(const Request_ContinueExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SharpDetect.Common.Messages.Request_ContinueExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ContinueExecution::IsInitialized() const {
  return true;
}

void Request_ContinueExecution::InternalSwap(Request_ContinueExecution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request_ContinueExecution::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Messages
}  // namespace Common
}  // namespace SharpDetect
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SharpDetect::Common::Messages::RequestMessage* Arena::CreateMaybeMessage< ::SharpDetect::Common::Messages::RequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::SharpDetect::Common::Messages::RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SharpDetect::Common::Messages::Request_Instrumentation* Arena::CreateMaybeMessage< ::SharpDetect::Common::Messages::Request_Instrumentation >(Arena* arena) {
  return Arena::CreateInternal< ::SharpDetect::Common::Messages::Request_Instrumentation >(arena);
}
template<> PROTOBUF_NOINLINE ::SharpDetect::Common::Messages::ExternalMethodInfo* Arena::CreateMaybeMessage< ::SharpDetect::Common::Messages::ExternalMethodInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SharpDetect::Common::Messages::ExternalMethodInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SharpDetect::Common::Messages::Request_Wrapping* Arena::CreateMaybeMessage< ::SharpDetect::Common::Messages::Request_Wrapping >(Arena* arena) {
  return Arena::CreateInternal< ::SharpDetect::Common::Messages::Request_Wrapping >(arena);
}
template<> PROTOBUF_NOINLINE ::SharpDetect::Common::Messages::Request_ContinueExecution* Arena::CreateMaybeMessage< ::SharpDetect::Common::Messages::Request_ContinueExecution >(Arena* arena) {
  return Arena::CreateInternal< ::SharpDetect::Common::Messages::Request_ContinueExecution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
