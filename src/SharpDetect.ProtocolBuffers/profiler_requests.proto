/*
 * Copyright (C) 2020, Andrej Čižmárik
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package SharpDetect.Common.Messages;

message RequestMessage
{
	uint64                      RequestId = 1;
	uint64                      NotificationId = 2;

	oneof Payload
	{
		Request_Ping				Ping = 3;
		Request_NoChanges			NoChanges = 4;
		Request_Instrumentation		Instrumentation = 5;
		Request_Wrapping			Wrapping = 6;
		Request_ContinueExecution   ContinueExecution = 7;
		Request_Termination			Termination = 8;
	}
}

message Request_NoChanges
{
	// No additional parameters
}

message Request_Ping
{
	// No additional parameters
}

message Request_Instrumentation
{
	bool        InjectHooks = 1;
	bool        CaptureArguments = 2;
	bool        CaptureReturnValue = 3;
	bytes		Bytecode = 4;

	// Which arguments to capture
	// - this is an array of uint16_t pairs
	// - first element determines index (CLI allows up to 65536 parameters)
	// - second element determines size of the argument in bytes (lets assume nobody uses structs > 65kB...)
	// --- size should be specified in the dereferenced state (indirect loads)
	bytes       ArgumentInfos = 5;

	// Which arguments are passed in the "by-ref" manner
	// - this is a bit-array (reading from left)
	// - MSb of the first element corresponds to the first captured argument
	bytes       PassingByRefInfos = 6;
}

message ExternalMethodInfo
{
	uint32      TypeToken = 1;
	uint32      FunctionToken = 2;
	uint32      ParametersCount = 3;
}

message Request_Wrapping
{
	repeated ExternalMethodInfo MethodsToWrap = 1;
}

message Request_ContinueExecution
{
	// No additional parameters
}

message Request_Termination
{
	// No additional parameters
}